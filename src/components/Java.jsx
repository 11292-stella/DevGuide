import { Col, Container, Row, Table, Card } from "react-bootstrap"
import "../styles/java.css"

const Java = function () {
  return (
    <>
      <div className="page-background d-flex flex-column min-vh-100">
        <Container className="flex-grow-1 py-5">
          <Row className="justify-content-center">
            <Col md={8} lg={6} className="text-center text-light">
              <h1>‚òï Java</h1>
              <p>
                Java √® una delle fondamenta pi√π solide per lo sviluppo backend,
                Android, e persino desktop.
              </p>

              <Table
                striped
                bordered
                hover
                responsive
                variant="dark"
                className="mt-4"
              >
                <thead>
                  <tr>
                    <th>Tipo</th>
                    <th>Descrizione</th>
                    <th>Esempio</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      <code>int</code>
                    </td>
                    <td>Numero intero</td>
                    <td>
                      <code>int numero = 10;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>double</code>
                    </td>
                    <td>Numero decimale ad alta precisione</td>
                    <td>
                      <code>double prezzo = 19.99;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>char</code>
                    </td>
                    <td>Singolo carattere Unicode</td>
                    <td>
                      <code>char iniziale = 'S';</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>boolean</code>
                    </td>
                    <td>Valore logico: vero o falso</td>
                    <td>
                      <code>boolean attiva = true;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>long</code>
                    </td>
                    <td>
                      Intero lungo (usa <code>L</code> alla fine)
                    </td>
                    <td>
                      <code>long id = 123456789L;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>float</code>
                    </td>
                    <td>
                      Numero decimale meno preciso (usa <code>f</code>)
                    </td>
                    <td>
                      <code>float peso = 5.5f;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>byte</code>
                    </td>
                    <td>Piccolo intero (da -128 a 127)</td>
                    <td>
                      <code>byte valore = 127;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>short</code>
                    </td>
                    <td>Intero breve (da -32.768 a 32.767)</td>
                    <td>
                      <code>short et√† = 25;</code>
                    </td>
                  </tr>
                </tbody>
              </Table>
              <h2 className="mt-5">
                Tipi di dato primitivi in Java ‚Äì Esempi pratici
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üßÆ Tipi di dato primitivi in Java
                  </Card.Title>

                  {/* Interi */}
                  <p className="text-start mt-3">
                    <strong>üî¢ Interi</strong>
                    <br />
                    <code>int</code> ‚Üí intero standard
                    <br />
                    <code>long</code> ‚Üí intero lungo, usa <code>L</code> finale
                    <br />
                    <code>short</code> ‚Üí intero breve
                    <br />
                    <code>byte</code> ‚Üí piccolo intero (da -128 a 127)
                  </p>

                  {/* Esempi interi */}
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`int numero = 42;
long id = 123456789L;
short et√† = 25;
byte valore = 127;`}
                  </pre>

                  {/* Decimali */}
                  <p className="text-start mt-4">
                    <strong>üí∞ Decimali</strong>
                    <br />
                    <code>double</code> ‚Üí decimale ad alta precisione
                    <br />
                    <code>float</code> ‚Üí decimale meno preciso, usa{" "}
                    <code>f</code> finale
                  </p>

                  {/* Esempi decimali */}
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`double prezzo = 19.99;
float peso = 5.5f;`}
                  </pre>

                  {/* Caratteri e logica */}
                  <p className="text-start mt-4">
                    <strong>üî§ Caratteri e logica</strong>
                    <br />
                    <code>char</code> ‚Üí singolo carattere Unicode
                    <br />
                    <code>boolean</code> ‚Üí vero o falso
                  </p>

                  {/* Esempi caratteri e boolean */}
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`char iniziale = 'S';
boolean attiva = true;`}
                  </pre>

                  {/* Note finali */}
                  <p className="text-start mt-4">
                    <strong>üìå Note utili</strong>
                    <br />I tipi primitivi non possono essere <code>null</code>
                    <br />
                    Sono <strong>case-sensitive</strong> e non hanno metodi
                    associati
                    <br />
                    Usali per ottimizzare memoria e performance
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">Tipi Complessi</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß† Tipi di dato complessi in Java
                  </Card.Title>

                  {/* String */}
                  <p className="text-start mt-3">
                    <strong>
                      üî§ <code>String</code>
                    </strong>
                    <br />
                    Tipo complesso per gestire testo. √à una classe, non un tipo
                    primitivo.
                    <br />
                    Supporta metodi come <code>.length()</code>,{" "}
                    <code>.toUpperCase()</code>, <code>.contains()</code>
                  </p>

                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`String nome = "Stella";
System.out.println(nome.toUpperCase()); // STELLA`}
                  </pre>

                  {/* Array */}
                  <p className="text-start mt-4">
                    <strong>
                      üì¶ <code>Array</code>
                    </strong>
                    <br />
                    Struttura fissa per contenere pi√π elementi dello stesso
                    tipo.
                    <br />
                    La dimensione √® definita alla creazione e non pu√≤ cambiare.
                  </p>

                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`int[] voti = {8, 7, 9};
System.out.println(voti[0]); // 8`}
                  </pre>

                  {/* ArrayList */}
                  <p className="text-start mt-4">
                    <strong>
                      üìö <code>ArrayList</code>
                    </strong>
                    <br />
                    Collezione dinamica che pu√≤ crescere o ridursi. Fa parte di{" "}
                    <code>java.util</code>
                    <br />
                    Supporta metodi come <code>.add()</code>,{" "}
                    <code>.remove()</code>, <code>.size()</code>
                  </p>

                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.ArrayList;

ArrayList<String> nomi = new ArrayList<>();
nomi.add("Stella");
nomi.add("Luna");
System.out.println(nomi.size()); // 2`}
                  </pre>

                  {/* HashMap */}
                  <p className="text-start mt-4">
                    <strong>
                      üóÇÔ∏è <code>HashMap</code>
                    </strong>
                    <br />
                    Mappa che associa chiavi a valori. Fa parte di{" "}
                    <code>java.util</code>
                    <br />
                    Utile per accedere rapidamente a dati tramite una chiave.
                  </p>

                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.HashMap;

HashMap<String, Integer> punteggi = new HashMap<>();
punteggi.put("Stella", 10);
System.out.println(punteggi.get("Stella")); // 10`}
                  </pre>

                  {/* Note finali */}
                  <p className="text-start mt-4">
                    <strong>üìå Note utili</strong>
                    <br />
                    I tipi complessi sono oggetti, quindi hanno metodi e
                    propriet√†
                    <br />
                    Devono essere importati se non fanno parte del package{" "}
                    <code>java.lang</code>
                    <br />
                    Usali per gestire strutture dati pi√π flessibili e potenti
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üîó Operatori logici in Java </h2>
              <Table
                striped
                bordered
                hover
                responsive
                variant="dark"
                className="mt-4"
              >
                <thead>
                  <tr>
                    <th>Operatore</th>
                    <th>Descrizione</th>
                    <th>Esempio</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      <code>&amp;&amp;</code>
                    </td>
                    <td>
                      AND logico ‚Äì vero se entrambe le condizioni sono vere
                    </td>
                    <td>
                      <code>(x &gt; 5 &amp;&amp; y &lt; 10)</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>||</code>
                    </td>
                    <td>OR logico ‚Äì vero se almeno una condizione √® vera</td>
                    <td>
                      <code>(x &gt; 5 || y &lt; 10)</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>!</code>
                    </td>
                    <td>NOT logico ‚Äì inverte il valore booleano</td>
                    <td>
                      <code>!(x &gt; 5)</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>==</code>
                    </td>
                    <td>Uguale ‚Äì confronta due valori</td>
                    <td>
                      <code>x == y</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>!=</code>
                    </td>
                    <td>Diverso ‚Äì vero se i valori sono diversi</td>
                    <td>
                      <code>x != y</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>&amp;</code>
                    </td>
                    <td>AND bitwise ‚Äì confronta bit per bit</td>
                    <td>
                      <code>x &amp; y</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>|</code>
                    </td>
                    <td>OR bitwise ‚Äì confronta bit per bit</td>
                    <td>
                      <code>x | y</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>^</code>
                    </td>
                    <td>XOR bitwise ‚Äì vero se i bit sono diversi</td>
                    <td>
                      <code>x ^ y</code>
                    </td>
                  </tr>
                </tbody>
              </Table>
              <h2 className="mt-5">üîó Utilizzo degli operatori logici</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üîó Operatori logici in Java ‚Äì Esempi pratici
                  </Card.Title>

                  {/* AND logico */}
                  <p className="text-start mt-3">
                    <strong>
                      ‚úÖ <code>&&</code> ‚Äì AND logico
                    </strong>
                    <br />
                    Restituisce <code>true</code> solo se entrambe le condizioni
                    sono vere.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`int et√† = 20;
boolean isStudent = true;

if (et√† > 18 && isStudent) {
  System.out.println("Accesso consentito");
}`}
                  </pre>

                  {/* OR logico */}
                  <p className="text-start mt-4">
                    <strong>
                      üîÄ <code>||</code> ‚Äì OR logico
                    </strong>
                    <br />
                    Restituisce <code>true</code> se almeno una condizione √®
                    vera.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`boolean haInvito = false;
boolean √®VIP = true;

if (haInvito || √®VIP) {
  System.out.println("Entra alla festa");
}`}
                  </pre>

                  {/* NOT logico */}
                  <p className="text-start mt-4">
                    <strong>
                      üö´ <code>!</code> ‚Äì NOT logico
                    </strong>
                    <br />
                    Inverte il valore booleano.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`boolean acceso = false;

if (!acceso) {
  System.out.println("Accendi il dispositivo");
}`}
                  </pre>

                  {/* Uguale e diverso */}
                  <p className="text-start mt-4">
                    <strong>
                      üîç <code>==</code> / <code>!=</code> ‚Äì confronto
                    </strong>
                    <br />
                    <code>==</code> verifica uguaglianza, <code>!=</code>{" "}
                    verifica disuguaglianza.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`int a = 5;
int b = 7;

if (a != b) {
  System.out.println("I valori sono diversi");
}`}
                  </pre>

                  {/* Note finali */}
                  <p className="text-start mt-4">
                    <strong>üìå Note utili</strong>
                    <br />
                    Gli operatori logici sono fondamentali per il controllo del
                    flusso
                    <br />
                    Possono essere combinati per creare condizioni complesse
                    <br />
                    Gli operatori bitwise (<code>&</code>, <code>|</code>,{" "}
                    <code>^</code>) agiscono sui singoli bit
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üîÑ Cicli in Java ‚Äì for, while, do-while, for-each
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üîÑ Java ‚Äì Cicli e Iterazioni
                  </Card.Title>

                  {/* For */}
                  <p className="mt-3">
                    <strong>
                      üîÅ <code>for</code>
                    </strong>
                    <br />
                    Usato quando sai quante volte vuoi ripetere qualcosa.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`for (int i = 0; i < 5; i++) {
  System.out.println("Iterazione: " + i);
}`}
                  </pre>

                  {/* While */}
                  <p className="mt-4">
                    <strong>
                      üîÑ <code>while</code>
                    </strong>
                    <br />
                    Esegue il ciclo finch√© la condizione √® vera. Controlla prima
                    di entrare.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`int i = 0;
while (i < 5) {
  System.out.println("Valore: " + i);
  i++;
}`}
                  </pre>

                  {/* Do-While */}
                  <p className="mt-4">
                    <strong>
                      üîÇ <code>do-while</code>
                    </strong>
                    <br />
                    Simile a <code>while</code>, ma esegue almeno una volta
                    prima di controllare.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`int i = 0;
do {
  System.out.println("Eseguito almeno una volta: " + i);
  i++;
} while (i < 5);`}
                  </pre>

                  {/* For-Each */}
                  <p className="mt-4">
                    <strong>
                      üì¶ <code>for-each</code>
                    </strong>
                    <br />
                    Usato per scorrere array o collezioni in modo semplice.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`String[] nomi = {"Stella", "Luna", "Sole"};

for (String nome : nomi) {
  System.out.println("Ciao " + nome);
}`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå In sintesi</strong>
                    <br />- <code>for</code>: iterazioni con contatore
                    <br />- <code>while</code>: condizione controllata prima
                    <br />- <code>do-while</code>: esegue almeno una volta
                    <br />- <code>for-each</code>: comodo per array e liste
                  </p>
                </Card.Body>
              </Card>

              <h2 className="mt-5"> üß† Cos‚Äô√® una classe in Java?</h2>
              <p>
                {" "}
                In Java, una classe √® un modello (template) che descrive le
                propriet√† (variabili) e i comportamenti (metodi) di un oggetto.
                √à il cuore della programmazione orientata agli oggetti (OOP).
              </p>
              <h3>üì¶ Una classe definisce:</h3>
              <ul>
                <li>
                  Attributi ‚Üí variabili che descrivono lo stato dell‚Äôoggetto
                </li>
                <li>Metodi ‚Üí funzioni che descrivono il comportamento</li>
                <li>Costruttori ‚Üí metodo speciale per creare oggetti</li>
                <li>
                  Modificatori di accesso ‚Üí controllano la visibilit√† (public,
                  private, ecc.)
                </li>
              </ul>
              <h2 className="mt-4">Struttura base di una classe Java</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üèóÔ∏è Struttura di una classe Java
                  </Card.Title>

                  {/* Definizione della classe */}
                  <p className="text-start mt-3">
                    <strong>üìò Definizione</strong>
                    <br />
                    Una classe si dichiara con <code>class</code> e pu√≤
                    contenere attributi, metodi e costruttori.
                  </p>

                  {/* Esempio completo */}
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Persona {
  // Attributi
  String nome;
  int et√†;

  // Costruttore
  public Persona(String nome, int et√†) {
    this.nome = nome;
    this.et√† = et√†;
  }

  // Metodo
  public void saluta() {
    System.out.println("Ciao, sono " + nome + " e ho " + et√† + " anni.");
  }
}`}
                  </pre>

                  {/* Istanza */}
                  <p className="text-start mt-4">
                    <strong>üß™ Creazione di un oggetto</strong>
                    <br />
                    Per usare una classe, si crea un'istanza (oggetto) con{" "}
                    <code>new</code>.
                  </p>

                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`Persona stella = new Persona("Stella", 30);
stella.saluta();`}
                  </pre>

                  {/* Spiegazioni */}
                  <p className="text-start mt-4">
                    <strong>üîç Dettagli</strong>
                    <br />
                    <code>this</code> ‚Üí si riferisce all‚Äôistanza corrente
                    <br />
                    <code>public</code> ‚Üí visibile ovunque
                    <br />
                    <code>private</code> ‚Üí accessibile solo all‚Äôinterno della
                    classe
                  </p>

                  <p className="text-start mt-3">
                    <strong>üß± Buone pratiche</strong>
                    <br />
                    - Usa nomi chiari e camelCase
                    <br />- Incapsula i dati con <code>private</code> +
                    getter/setter
                    <br />- Ogni classe dovrebbe rappresentare un concetto
                    preciso
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-4">üîêModificatori di accesso in Java</h2>
              <Table
                striped
                bordered
                hover
                responsive
                variant="dark"
                className="mt-4"
              >
                <thead>
                  <tr>
                    <th>Modificatore</th>
                    <th>Visibilit√†</th>
                    <th>Descrizione</th>
                    <th>Esempio</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      <code>public</code>
                    </td>
                    <td>Tutti i package</td>
                    <td>Accessibile ovunque</td>
                    <td>
                      <code>public int et√†;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>private</code>
                    </td>
                    <td>Solo nella classe</td>
                    <td>Nasconde i dati, utile per l‚Äôincapsulamento</td>
                    <td>
                      <code>private String nome;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <code>protected</code>
                    </td>
                    <td>Classe + sottoclassi + stesso package</td>
                    <td>Accessibile da ereditariet√† o package</td>
                    <td>
                      <code>protected boolean attiva;</code>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <em>(default)</em>
                    </td>
                    <td>Solo stesso package</td>
                    <td>Accessibile solo da classi nello stesso package</td>
                    <td>
                      <code>int livello;</code>
                    </td>
                  </tr>
                </tbody>
              </Table>
              <h2 className="mt-4">
                üîêModificatori di accesso ‚Äì Esempi pratici
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üîê Modificatori di accesso in Java
                  </Card.Title>

                  {/* public */}
                  <p className="text-start mt-3">
                    <strong>
                      üåç <code>public</code>
                    </strong>
                    <br />
                    Accessibile da qualsiasi classe, anche fuori dal package.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Persona {
  public String nome = "Stella";
}`}
                  </pre>

                  {/* private */}
                  <p className="text-start mt-4">
                    <strong>
                      üîí <code>private</code>
                    </strong>
                    <br />
                    Accessibile solo all‚Äôinterno della classe. Usato per
                    proteggere i dati.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Persona {
  private int et√†;

  public void setEt√†(int nuovaEt√†) {
    et√† = nuovaEt√†;
  }

  public int getEt√†() {
    return et√†;
  }
}`}
                  </pre>

                  {/* protected */}
                  <p className="text-start mt-4">
                    <strong>
                      üß¨ <code>protected</code>
                    </strong>
                    <br />
                    Accessibile da sottoclassi e classi nello stesso package.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`class Persona {
  protected boolean attiva = true;
}

class Studente extends Persona {
  public void verifica() {
    if (attiva) {
      System.out.println("Studente attivo");
    }
  }
}`}
                  </pre>

                  {/* default */}
                  <p className="text-start mt-4">
                    <strong>
                      üì¶ <em>default</em> (nessun modificatore)
                    </strong>
                    <br />
                    Accessibile solo da classi nello stesso package.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`class Persona {
  int livello = 1; // default access
}`}
                  </pre>

                  {/* Note finali */}
                  <p className="text-start mt-4">
                    <strong>üìå Note utili</strong>
                    <br />- Usa <code>private</code> per proteggere i dati
                    <br />- Espone solo ci√≤ che serve con <code>
                      public
                    </code>{" "}
                    getter/setter
                    <br />- <code>protected</code> √® utile per ereditariet√†
                    <br />- Il <em>default</em> √® invisibile fuori dal package
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üßæConcetti fondamentali Java ‚Äì Classe, Costruttori, Metodi &
                Override
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß¨ Java ‚Äì Concetti OOP Essenziali
                  </Card.Title>

                  {/* Costruttore */}
                  <p className="mt-3">
                    <strong>üèóÔ∏è Costruttore</strong>
                    <br />√à un metodo speciale che viene chiamato
                    automaticamente quando si crea un oggetto. Serve per
                    inizializzare i valori.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Persona {
  String nome;

  // Costruttore
  public Persona(String nome) {
    this.nome = nome;
  }
}`}
                  </pre>

                  {/* Metodo */}
                  <p className="mt-4">
                    <strong>üîß Metodo</strong>
                    <br />√à una funzione definita dentro una classe. Pu√≤
                    eseguire azioni, calcoli, stampare, ecc.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public void saluta() {
  System.out.println("Ciao " + nome);
}`}
                  </pre>

                  {/* Getter & Setter */}
                  <p className="mt-4">
                    <strong>üì•üì§ Getter & Setter</strong>
                    <br />
                    Sono metodi per leggere (get) e modificare (set) i valori
                    privati di una classe. Usati per l‚Äôincapsulamento.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`private int et√†;

public int getEt√†() {
  return et√†;
}

public void setEt√†(int nuovaEt√†) {
  et√† = nuovaEt√†;
}`}
                  </pre>

                  {/* Override */}
                  <p className="mt-4">
                    <strong>üîÅ Override</strong>
                    <br />
                    Permette di riscrivere un metodo ereditato da una
                    superclasse per personalizzarne il comportamento.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`@Override
public void saluta() {
  System.out.println("Ciao, sono una sottoclasse!");
}`}
                  </pre>

                  {/* toString */}
                  <p className="mt-4">
                    <strong>
                      üìù <code>toString()</code>
                    </strong>
                    <br />√à un metodo speciale che restituisce una
                    rappresentazione testuale dell‚Äôoggetto. Utile per stamparlo.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`@Override
public String toString() {
  return "Persona: " + nome;
}`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå In sintesi</strong>
                    <br />- Il <strong>costruttore</strong> crea e inizializza
                    <br />- I <strong>metodi</strong> fanno cose
                    <br />- I <strong>getter/setter</strong> proteggono i dati
                    <br />- L‚Äô<strong>override</strong> personalizza l‚Äôeredit√†
                    <br />- <code>toString()</code> rende l‚Äôoggetto leggibile
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üöÄPunto di partenza, ereditariet√† e comunicazione tra classi in
                Java
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üöÄ Java ‚Äì Da <code>main</code> all‚ÄôEreditariet√†
                  </Card.Title>

                  {/* Punto di partenza */}
                  <p className="mt-3">
                    <strong>
                      üéØ Punto di partenza: <code>main()</code>
                    </strong>
                    <br />
                    In Java, il programma parte dal metodo <code>main</code>. √à
                    il cuore dell‚Äôesecuzione.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Avvio {
  public static void main(String[] args) {
    Persona p = new Persona("Stella");
    p.saluta();
  }
}`}
                  </pre>

                  {/* Ereditariet√† */}
                  <p className="mt-4">
                    <strong>üß¨ Ereditariet√†</strong>
                    <br />
                    Una classe pu√≤ <em>estendere</em> un‚Äôaltra per ereditarne
                    attributi e metodi. La classe base √® detta{" "}
                    <strong>superclasse</strong>, quella derivata √® la{" "}
                    <strong>sottoclasse</strong>.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`// Superclasse
public class Persona {
  String nome;

  public Persona(String nome) {
    this.nome = nome;
  }

  public void saluta() {
    System.out.println("Ciao, sono " + nome);
  }
}

// Sottoclasse
public class Studente extends Persona {
  int matricola;

  public Studente(String nome, int matricola) {
    super(nome); // chiama il costruttore della superclasse
    this.matricola = matricola;
  }

  @Override
  public void saluta() {
    System.out.println("Studente " + nome + ", matricola " + matricola);
  }
}`}
                  </pre>

                  {/* Comunicazione tra classi */}
                  <p className="mt-4">
                    <strong>üì° Comunicazione tra classi</strong>
                    <br />
                    Le classi comunicano creando oggetti e chiamando metodi.
                    Puoi passare oggetti come parametri.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Registro {
  public void stampaSaluto(Persona p) {
    p.saluta(); // chiama il metodo della classe passata
  }
}

// Nel main:
Registro r = new Registro();
Studente s = new Studente("Stella", 123);
r.stampaSaluto(s); // stampa: Studente Stella, matricola 123`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå In sintesi</strong>
                    <br />- Il metodo <code>main()</code> √® il punto di partenza
                    <br />- Le classi possono <code>estendere</code> altre
                    classi
                    <br />- <code>super()</code> richiama il costruttore della
                    superclasse
                    <br />- <code>@Override</code> permette di personalizzare i
                    metodi ereditati
                    <br />- Le classi comunicano creando oggetti e usando metodi
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üîÅPolimorfismo, Interfacce, Classi Astratte & Enum in Java
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß† Java ‚Äì Concetti OOP Avanzati
                  </Card.Title>

                  {/* Polimorfismo */}
                  <p className="mt-3">
                    <strong>üîÅ Polimorfismo</strong>
                    <br />
                    Significa "molte forme". In Java, puoi usare un oggetto di
                    una sottoclasse come se fosse della superclasse. Il
                    comportamento dipende dalla classe reale dell‚Äôoggetto.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`Persona p = new Studente("Stella", 123);
p.saluta(); // chiama il metodo override di Studente`}
                  </pre>

                  {/* Interfacce */}
                  <p className="mt-4">
                    <strong>üß© Interfacce</strong>
                    <br />
                    Un‚Äôinterfaccia √® un contratto: definisce metodi che una
                    classe deve implementare. Una classe pu√≤ implementare pi√π
                    interfacce.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`interface Salutabile {
  void saluta();
}

class Persona implements Salutabile {
  public void saluta() {
    System.out.println("Ciao!");
  }
}`}
                  </pre>

                  {/* Classi astratte */}
                  <p className="mt-4">
                    <strong>üß† Classi astratte</strong>
                    <br />
                    Non possono essere istanziate direttamente. Servono come
                    base per altre classi. Possono avere metodi concreti e
                    astratti.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`abstract class Animale {
  abstract void verso();

  public void dormi() {
    System.out.println("Zzz...");
  }
}

class Cane extends Animale {
  public void verso() {
    System.out.println("Bau!");
  }
}`}
                  </pre>

                  {/* Enum */}
                  <p className="mt-4">
                    <strong>üü™ Enum (Enumerazioni)</strong>
                    <br />
                    Sono tipi speciali che rappresentano un insieme fisso di
                    costanti. Usati per ruoli, stati, categorie‚Ä¶ e s√¨, si
                    scrivono in MAIUSCOLO!
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public enum Ruolo {
  ADMIN,
  UTENTE,
  MODERATORE
}

Ruolo r = Ruolo.ADMIN;
System.out.println(r); // stampa: ADMIN`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå In sintesi</strong>
                    <br />- Il <strong>polimorfismo</strong> permette
                    comportamenti dinamici
                    <br />- Le <strong>interfacce</strong> definiscono obblighi
                    <br />- Le <strong>classi astratte</strong> sono basi
                    incomplete
                    <br />- Gli <strong>enum</strong> rappresentano costanti
                    leggibili e sicure
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üßæ Mini-Progetto Java ‚Äì Sistema Utenti con OOP Completa
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üíª Mini-Progetto Java ‚Äì Sistema Utenti
                  </Card.Title>

                  {/* Enum */}
                  <p className="mt-3">
                    <strong>üü™ Enum ‚Äì Ruoli utente</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public enum Ruolo {
  ADMIN,
  UTENTE
}`}
                  </pre>

                  {/* Interfaccia */}
                  <p className="mt-4">
                    <strong>üß© Interfaccia ‚Äì Salutabile</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public interface Salutabile {
  void saluta();
}`}
                  </pre>

                  {/* Classe astratta */}
                  <p className="mt-4">
                    <strong>üß† Classe astratta ‚Äì Persona</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public abstract class Persona implements Salutabile {
  protected String nome;
  protected Ruolo ruolo;

  public Persona(String nome, Ruolo ruolo) {
    this.nome = nome;
    this.ruolo = ruolo;
  }

  public abstract void saluta();

  public String getNome() {
    return nome;
  }

  public Ruolo getRuolo() {
    return ruolo;
  }

  @Override
  public String toString() {
    return ruolo + ": " + nome;
  }
}`}
                  </pre>

                  {/* Sottoclasse Utente */}
                  <p className="mt-4">
                    <strong>üë§ Sottoclasse ‚Äì Utente</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Utente extends Persona {
  public Utente(String nome) {
    super(nome, Ruolo.UTENTE);
  }

  @Override
  public void saluta() {
    System.out.println("Ciao " + nome + ", benvenuto nel sistema!");
  }
}`}
                  </pre>

                  {/* Sottoclasse Admin */}
                  <p className="mt-4">
                    <strong>üõ°Ô∏è Sottoclasse ‚Äì Admin</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Admin extends Persona {
  public Admin(String nome) {
    super(nome, Ruolo.ADMIN);
  }

  @Override
  public void saluta() {
    System.out.println("üëë Admin " + nome + " ha effettuato l'accesso.");
  }
}`}
                  </pre>

                  {/* Classe Registro ‚Äì Comunicazione */}
                  <p className="mt-4">
                    <strong>üìã Classe ‚Äì Registro</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Registro {
  public void accogli(Persona p) {
    p.saluta(); // polimorfismo: chiama il metodo giusto
    System.out.println("Registrato: " + p.toString());
  }
}`}
                  </pre>

                  {/* Main */}
                  <p className="mt-4">
                    <strong>
                      üöÄ Punto di partenza ‚Äì <code>main()</code>
                    </strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Avvio {
  public static void main(String[] args) {
    Registro registro = new Registro();

    Persona u1 = new Utente("Stella");
    Persona a1 = new Admin("Luna");

    registro.accogli(u1);
    registro.accogli(a1);
  }
}`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå Cosa hai usato</strong>
                    <br />‚úÖ <code>main()</code> come punto di partenza
                    <br />‚úÖ <code>enum</code> per ruoli
                    <br />‚úÖ <code>interface</code> per comportamento
                    <br />‚úÖ <code>abstract class</code> come base
                    <br />‚úÖ <code>override</code> per saluti personalizzati
                    <br />‚úÖ <code>polimorfismo</code> per gestire tutto con una
                    sola firma
                    <br />‚úÖ <code>toString()</code> per stampa leggibile
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                ‚òÄÔ∏è Collezioni Java ‚Äì ArrayList, HashMap, Set e altro
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üì¶ Java ‚Äì Collezioni e Strutture Dati
                  </Card.Title>

                  {/* ArrayList */}
                  <p className="mt-3">
                    <strong>
                      üìã <code>ArrayList</code>
                    </strong>
                    <br />
                    Lista dinamica che pu√≤ crescere. Puoi aggiungere, rimuovere,
                    accedere per indice.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.ArrayList;

ArrayList<String> nomi = new ArrayList<>();
nomi.add("Stella");
nomi.add("Luna");

System.out.println(nomi.get(0)); // Stella
nomi.remove("Luna");`}
                  </pre>

                  {/* HashMap */}
                  <p className="mt-4">
                    <strong>
                      üîë <code>HashMap</code>
                    </strong>
                    <br />
                    Mappa che associa una chiave a un valore. Perfetta per
                    dizionari, rubriche, configurazioni.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.HashMap;

HashMap<String, Integer> punteggi = new HashMap<>();
punteggi.put("Stella", 100);
punteggi.put("Luna", 80);

System.out.println(punteggi.get("Stella")); // 100`}
                  </pre>

                  {/* Set */}
                  <p className="mt-4">
                    <strong>
                      üßÆ <code>Set</code>
                    </strong>
                    <br />
                    Collezione che non permette duplicati. Utile per insiemi
                    unici.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.HashSet;

HashSet<String> ruoli = new HashSet<>();
ruoli.add("ADMIN");
ruoli.add("UTENTE");
ruoli.add("ADMIN"); // ignorato, gi√† presente

System.out.println(ruoli.size()); // 2`}
                  </pre>

                  {/* Iterazione */}
                  <p className="mt-4">
                    <strong>üîÑ Iterare su collezioni</strong>
                    <br />
                    Puoi usare <code>for-each</code> per scorrere qualsiasi
                    collezione.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`for (String nome : nomi) {
  System.out.println("Ciao " + nome);
}

for (String chiave : punteggi.keySet()) {
  System.out.println(chiave + ": " + punteggi.get(chiave));
}`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå In sintesi</strong>
                    <br />- <code>ArrayList</code>: lista ordinata e dinamica
                    <br />- <code>HashMap</code>: coppie chiave-valore
                    <br />- <code>Set</code>: elementi unici, no duplicati
                    <br />- Tutte si trovano nel package <code>java.util</code>
                    <br />- Puoi iterarle con <code>for-each</code> o{" "}
                    <code>iterator</code>
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üß† Java ‚Äì LinkedList & TreeMap con esempi pratici
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üå≥ Java ‚Äì LinkedList & TreeMap
                  </Card.Title>

                  {/* LinkedList */}
                  <p className="mt-3">
                    <strong>
                      üîó <code>LinkedList</code>
                    </strong>
                    <br />
                    Lista dinamica che permette inserimenti e rimozioni
                    efficienti. Pu√≤ essere usata come lista, coda o stack.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.LinkedList;

LinkedList<String> nomi = new LinkedList<>();
nomi.add("Stella");
nomi.addFirst("Luna");
nomi.addLast("Sole");

System.out.println(nomi); // [Luna, Stella, Sole]

nomi.removeFirst(); // rimuove Luna
System.out.println(nomi); // [Stella, Sole]`}
                  </pre>

                  {/* TreeMap */}
                  <p className="mt-4">
                    <strong>
                      üå≤ <code>TreeMap</code>
                    </strong>
                    <br />
                    Mappa ordinata per chiavi. Le chiavi vengono automaticamente
                    ordinate (alfabeticamente o numericamente).
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.util.TreeMap;

TreeMap<String, Integer> punteggi = new TreeMap<>();
punteggi.put("Luna", 80);
punteggi.put("Stella", 100);
punteggi.put("Sole", 90);

System.out.println(punteggi);
// {Luna=80, Sole=90, Stella=100} ‚Üí ordinato per chiave`}
                  </pre>

                  {/* Confronto */}
                  <p className="mt-4">
                    <strong>üìä Confronto rapido</strong>
                  </p>
                  <ul>
                    <li>
                      <code>LinkedList</code> ‚Üí ottima per inserimenti/rimozioni
                      frequenti
                    </li>
                    <li>
                      <code>TreeMap</code> ‚Üí ottima per mantenere ordine tra le
                      chiavi
                    </li>
                    <li>
                      Entrambe fanno parte di <code>java.util</code>
                    </li>
                  </ul>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå In sintesi</strong>
                    <br />- Usa <code>LinkedList</code> se ti serve flessibilit√†
                    nella posizione
                    <br />- Usa <code>TreeMap</code> se vuoi una mappa ordinata
                    <br />- Entrambe supportano metodi come <code>
                      add
                    </code>, <code>remove</code>, <code>get</code>,{" "}
                    <code>keySet</code>
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üßØJava ‚Äì Gestione delle Eccezioni (try, catch, finally, throw)
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üö® Java ‚Äì Eccezioni & Gestione degli Errori
                  </Card.Title>

                  {/* Introduzione */}
                  <p className="mt-3">
                    Le eccezioni sono eventi che interrompono il normale flusso
                    del programma. Java ti permette di gestirle con blocchi{" "}
                    <code>try</code>, <code>catch</code>, <code>finally</code> e{" "}
                    <code>throw</code>.
                  </p>

                  {/* Struttura base */}
                  <p className="mt-4">
                    <strong>üìê Struttura base</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`try {
    // codice che pu√≤ generare un'eccezione
} catch (ExceptionTipo e) {
    // codice per gestire l'errore
} finally {
    // codice che viene sempre eseguito
}`}
                  </pre>

                  {/* Esempio pratico */}
                  <p className="mt-4">
                    <strong>üß™ Esempio: divisione con controllo</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Divisione {
    public static void main(String[] args) {
        try {
            int a = 10;
            int b = 0;
            int risultato = a / b; // genera ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("Errore: divisione per zero!");
        } finally {
            System.out.println("Operazione conclusa.");
        }
    }
}`}
                  </pre>

                  {/* throw */}
                  <p className="mt-4">
                    <strong>
                      üéØ <code>throw</code> ‚Äì Lanciare un'eccezione
                    </strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public void setEt√†(int et√†) {
    if (et√† < 0) {
        throw new IllegalArgumentException("Et√† non pu√≤ essere negativa");
    }
    this.et√† = et√†;
}`}
                  </pre>

                  {/* Tipi comuni */}
                  <p className="mt-4">
                    <strong>üìö Tipi di eccezioni comuni</strong>
                  </p>
                  <ul>
                    <li>
                      <code>ArithmeticException</code> ‚Üí divisione per zero
                    </li>
                    <li>
                      <code>NullPointerException</code> ‚Üí oggetto nullo
                    </li>
                    <li>
                      <code>ArrayIndexOutOfBoundsException</code> ‚Üí indice non
                      valido
                    </li>
                    <li>
                      <code>IllegalArgumentException</code> ‚Üí argomento non
                      valido
                    </li>
                    <li>
                      <code>IOException</code> ‚Üí errore di input/output
                    </li>
                  </ul>

                  {/* Consigli */}
                  <p className="mt-4">
                    <strong>üí° Consigli utili</strong>
                  </p>
                  <ul>
                    <li>
                      Usa <code>try-catch</code> per evitare crash improvvisi
                    </li>
                    <li>
                      Il blocco <code>finally</code> √® perfetto per chiudere
                      file o connessioni
                    </li>
                    <li>
                      Puoi creare eccezioni personalizzate estendendo{" "}
                      <code>Exception</code>
                    </li>
                  </ul>

                  {/* Conclusione */}
                  <p className="mt-4">
                    Le eccezioni ti aiutano a scrivere codice pi√π robusto e
                    sicuro. Gestirle bene √® segno di maturit√† da sviluppatore üîê
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üß≠Java ‚Äì Eccezioni Checked vs Unchecked</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    ‚öñÔ∏è Java ‚Äì Checked vs Unchecked Exceptions
                  </Card.Title>

                  {/* Introduzione */}
                  <p className="mt-3">
                    In Java, le eccezioni si dividono in due categorie
                    principali:
                    <strong> Checked </strong> (verificate) e{" "}
                    <strong> Unchecked </strong> (non verificate).
                  </p>

                  {/* Checked Exceptions */}
                  <p className="mt-4">
                    <strong>‚úÖ Checked Exceptions</strong>
                  </p>
                  <ul>
                    <li>Controllate dal compilatore</li>
                    <li>
                      Devono essere gestite con <code>try-catch</code> o
                      dichiarate con <code>throws</code>
                    </li>
                    <li>Tipiche in operazioni I/O, file, database</li>
                  </ul>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class LetturaFile {
    public static void main(String[] args) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader("file.txt"));
            System.out.println(reader.readLine());
            reader.close();
        } catch (IOException e) {
            System.out.println("Errore nella lettura del file!");
        }
    }
}`}
                  </pre>

                  {/* Unchecked Exceptions */}
                  <p className="mt-4">
                    <strong>‚ùå Unchecked Exceptions</strong>
                  </p>
                  <ul>
                    <li>Non obbligatorie da gestire</li>
                    <li>
                      Derivano da <code>RuntimeException</code>
                    </li>
                    <li>Tipiche in errori di logica o programmazione</li>
                  </ul>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Divisione {
    public static void main(String[] args) {
        int a = 10;
        int b = 0;
        int risultato = a / b; // ArithmeticException (unchecked)
        System.out.println(risultato);
    }
}`}
                  </pre>

                  {/* Confronto */}
                  <p className="mt-4">
                    <strong>üìä Confronto rapido</strong>
                  </p>
                  <table className="table table-bordered text-center">
                    <thead>
                      <tr>
                        <th>Tipo</th>
                        <th>Obbligo di gestione</th>
                        <th>Classe base</th>
                        <th>Esempi</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>Checked</td>
                        <td>S√¨</td>
                        <td>
                          <code>Exception</code>
                        </td>
                        <td>
                          <code>IOException</code>, <code>SQLException</code>
                        </td>
                      </tr>
                      <tr>
                        <td>Unchecked</td>
                        <td>No</td>
                        <td>
                          <code>RuntimeException</code>
                        </td>
                        <td>
                          <code>NullPointerException</code>,{" "}
                          <code>ArithmeticException</code>
                        </td>
                      </tr>
                    </tbody>
                  </table>

                  {/* Consigli */}
                  <p className="mt-4">
                    <strong>üí° Consigli utili</strong>
                  </p>
                  <ul>
                    <li>
                      Usa <strong>checked</strong> per errori esterni (file,
                      rete, DB)
                    </li>
                    <li>
                      Usa <strong>unchecked</strong> per errori di logica
                      interna
                    </li>
                    <li>
                      Non ignorare mai le eccezioni: gestirle bene = codice
                      solido
                    </li>
                  </ul>

                  {/* Conclusione */}
                  <p className="mt-4">
                    Capire la differenza tra checked e unchecked ti aiuta a
                    scrivere codice pi√π sicuro e mantenibile. Le eccezioni non
                    sono nemici: sono alleati per evitare bug silenziosi üõ°Ô∏è
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üöÄJava ‚Äì Guida Completa agli Stream</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üåä Java ‚Äì Stream API: Tutto Quello Che Devi Sapere
                  </Card.Title>

                  {/* Cos'√® uno Stream */}
                  <p className="mt-3">
                    Uno <strong>Stream</strong> √® una sequenza di elementi che
                    supporta operazioni funzionali come <code>map</code>,{" "}
                    <code>filter</code>, <code>reduce</code>, ecc. Non modifica
                    la collezione originale, ma restituisce un nuovo flusso di
                    dati.
                  </p>

                  {/* Come si crea */}
                  <p className="mt-4">
                    <strong>üîß Come si crea uno Stream</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`List<String> nomi = List.of("Luna", "Stella", "Sole");
Stream<String> stream = nomi.stream();`}
                  </pre>

                  {/* Metodi principali */}
                  <p className="mt-4">
                    <strong>üß™ Metodi principali</strong>
                  </p>
                  <ul>
                    <li>
                      <code>filter()</code> ‚Üí filtra gli elementi
                    </li>
                    <li>
                      <code>map()</code> ‚Üí trasforma ogni elemento
                    </li>
                    <li>
                      <code>sorted()</code> ‚Üí ordina gli elementi
                    </li>
                    <li>
                      <code>collect()</code> ‚Üí raccoglie il risultato in una
                      collezione
                    </li>
                    <li>
                      <code>forEach()</code> ‚Üí esegue un'azione su ogni elemento
                    </li>
                    <li>
                      <code>count()</code> ‚Üí conta gli elementi
                    </li>
                    <li>
                      <code>findFirst()</code> ‚Üí restituisce il primo elemento
                    </li>
                    <li>
                      <code>anyMatch()</code> ‚Üí verifica se almeno uno soddisfa
                      una condizione
                    </li>
                  </ul>

                  {/* Esempio pratico */}
                  <p className="mt-4">
                    <strong>üåü Esempio: nomi con pi√π di 4 lettere</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`List<String> nomi = List.of("Luna", "Stella", "Sole");

List<String> filtrati = nomi.stream()
    .filter(n -> n.length() > 4)
    .map(String::toUpperCase)
    .sorted()
    .collect(Collectors.toList());

System.out.println(filtrati); // [STELLA]`}
                  </pre>

                  {/* Stream vs for */}
                  <p className="mt-4">
                    <strong>‚öîÔ∏è Stream vs For</strong>
                  </p>
                  <ul>
                    <li>
                      <strong>For</strong> ‚Üí pi√π verboso, imperativo
                    </li>
                    <li>
                      <strong>Stream</strong> ‚Üí pi√π conciso, dichiarativo
                    </li>
                    <li>Stream √® ideale per trasformazioni complesse</li>
                  </ul>

                  {/* Tipi di Stream */}
                  <p className="mt-4">
                    <strong>üß¨ Tipi di Stream</strong>
                  </p>
                  <ul>
                    <li>
                      <code>Stream&lt;T&gt;</code> ‚Üí generico
                    </li>
                    <li>
                      <code>IntStream</code>, <code>LongStream</code>,{" "}
                      <code>DoubleStream</code> ‚Üí per primitive
                    </li>
                    <li>
                      <code>parallelStream()</code> ‚Üí esecuzione parallela
                    </li>
                  </ul>

                  {/* Errori comuni */}
                  <p className="mt-4">
                    <strong>üö´ Errori comuni</strong>
                  </p>
                  <ul>
                    <li>
                      Usare <code>stream()</code> su collezioni vuote ‚Üí
                      attenzione a <code>findFirst()</code>
                    </li>
                    <li>
                      Riutilizzare uno stream ‚Üí non √® possibile, va ricreato
                    </li>
                    <li>
                      Dimenticare <code>collect()</code> ‚Üí non ottieni il
                      risultato
                    </li>
                  </ul>

                  {/* Conclusione */}
                  <p className="mt-4">
                    Gli Stream rendono il codice pi√π leggibile, potente e
                    funzionale. Una volta che li padroneggi, non torni pi√π
                    indietro üí´
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üß† Java Stream ‚Äì I Metodi Pi√π Usati</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üíº Java Stream ‚Äì I Metodi Essenziali da Usare a Lavoro
                  </Card.Title>

                  {/* Introduzione */}
                  <p className="mt-3">
                    Quando lavori con dati in Java, la{" "}
                    <strong>Stream API</strong> √® il tuo alleato. Ecco i metodi
                    pi√π usati in assoluto in ambienti professionali.
                  </p>

                  {/* MAP */}
                  <p className="mt-4">
                    <strong>
                      üîÑ <code>map()</code> ‚Äì Trasforma ogni elemento
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`List<String> nomi = List.of("luna", "sole", "stella");

List<String> maiuscoli = nomi.stream()
    .map(String::toUpperCase)
    .collect(Collectors.toList());

System.out.println(maiuscoli); // [LUNA, SOLE, STELLA]`}
                  </div>

                  {/* FILTER */}
                  <p className="mt-4">
                    <strong>
                      üö¶ <code>filter()</code> ‚Äì Seleziona solo ci√≤ che ti serve
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`List<Integer> numeri = List.of(1, 2, 3, 4, 5);

List<Integer> pari = numeri.stream()
    .filter(n -> n % 2 == 0)
    .collect(Collectors.toList());

System.out.println(pari); // [2, 4]`}
                  </div>

                  {/* COLLECT */}
                  <p className="mt-4">
                    <strong>
                      üì¶ <code>collect()</code> ‚Äì Raccoglie il risultato
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`List<String> parole = List.of("ciao", "mondo");

String frase = parole.stream()
    .collect(Collectors.joining(" "));

System.out.println(frase); // "ciao mondo"`}
                  </div>

                  {/* FOREACH */}
                  <p className="mt-4">
                    <strong>
                      üîÅ <code>forEach()</code> ‚Äì Esegui un‚Äôazione su ogni
                      elemento
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`List<String> nomi = List.of("Luna", "Sole");

nomi.stream()
    .forEach(n -> System.out.println("Ciao " + n));`}
                  </div>

                  {/* SORTED */}
                  <p className="mt-4">
                    <strong>
                      üìä <code>sorted()</code> ‚Äì Ordina gli elementi
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`List<String> nomi = List.of("Stella", "Luna", "Sole");

List<String> ordinati = nomi.stream()
    .sorted()
    .collect(Collectors.toList());

System.out.println(ordinati); // [Luna, Sole, Stella]`}
                  </div>

                  {/* DISTINCT */}
                  <p className="mt-4">
                    <strong>
                      üßπ <code>distinct()</code> ‚Äì Rimuove i duplicati
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`List<String> nomi = List.of("Luna", "Sole", "Luna");

List<String> unici = nomi.stream()
    .distinct()
    .collect(Collectors.toList());

System.out.println(unici); // [Luna, Sole]`}
                  </div>

                  {/* COUNT */}
                  <p className="mt-4">
                    <strong>
                      üî¢ <code>count()</code> ‚Äì Conta gli elementi
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                    }}
                  >
                    {String.raw`long quanti = List.of("Luna", "Sole", "Stella").stream()
    .filter(n -> n.length() > 4)
    .count();

System.out.println(quanti); // 1`}
                  </div>

                  {/* Conclusione */}
                  <p className="mt-4">
                    Questi metodi sono usati ogni giorno in backend, data
                    processing, microservizi e API. Se li padroneggi, sei gi√† un
                    passo avanti nel mondo del lavoro üöÄ
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">‚ö°Ô∏èJava ‚Äì Espressioni Lambda</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    ‚ö°Ô∏è Java ‚Äì Espressioni Lambda
                  </Card.Title>

                  <p className="mt-3">
                    Le <strong>lambda</strong> sono funzioni anonime introdotte
                    in Java 8. Rendono il codice pi√π conciso, leggibile e
                    funzionale. Sono fondamentali quando si lavora con{" "}
                    <code>Stream</code> e <code>functional interfaces</code>.
                  </p>

                  <p className="mt-4">
                    <strong>üß¨ Sintassi base</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    (parametri) -&gt; (corpo)
                  </div>
                  <ul>
                    <li>
                      <code>(x) -&gt; x * x</code> ‚Üí ritorno implicito
                    </li>
                    <li>
                      <code>(a, b) -&gt; a + b</code> ‚Üí pi√π parametri
                    </li>
                    <li>
                      <code>() -&gt; System.out.println("Ciao!")</code> ‚Üí nessun
                      parametro
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üöÄ Runnable</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    Runnable r = () -&gt; System.out.println("Task eseguito!");
                    r.run();
                  </div>

                  <p className="mt-4">
                    <strong>üìä Comparator</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    List&lt;String&gt; nomi = List.of("Luna", "Sole", "Stella");
                    nomi.sort((a, b) -&gt; a.compareToIgnoreCase(b));
                  </div>

                  <p className="mt-4">
                    <strong>üîç Predicate</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    Predicate&lt;String&gt; isNotEmpty = s -&gt; !s.isEmpty();
                    System.out.println(isNotEmpty.test("Ciao")); // true
                  </div>

                  <p className="mt-4">
                    <strong>üîß Function</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    Function&lt;Integer, String&gt; intToStr = i -&gt; "Numero:
                    " + i; System.out.println(intToStr.apply(5)); // Numero: 5
                  </div>

                  <p className="mt-4">
                    <strong>üì¶ Consumer</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    Consumer&lt;String&gt; stampa = s -&gt;
                    System.out.println("Hai scritto: " + s); stampa.accept("Ciao
                    Stella!");
                  </div>

                  <p className="mt-4">
                    <strong>üåä Stream + Lambda</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    List&lt;Integer&gt; numeri = List.of(1, 2, 3, 4, 5);
                    numeri.stream() .filter(n -&gt; n % 2 == 0) .map(n -&gt; n *
                    10) .forEach(n -&gt; System.out.println("Valore: " + n));
                  </div>

                  <p className="mt-4">
                    Le lambda sono essenziali nello sviluppo moderno in Java. Se
                    lavori con API, microservizi o data processing, le userai
                    ogni giorno. Pi√π le usi, pi√π il tuo codice diventa elegante
                    e potente üí™
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                üíº Mini Progetto Java con Stream e Lambda
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üõçÔ∏è Mini-Progetto Java ‚Äì Prodotti & Stream
                  </Card.Title>

                  {/* Classe Prodotto */}
                  <p className="mt-3">
                    <strong>üì¶ Classe ‚Äì Prodotto</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Prodotto {
  private String nome;
  private double prezzo;

  public Prodotto(String nome, double prezzo) {
    this.nome = nome;
    this.prezzo = prezzo;
  }

  public String getNome() {
    return nome;
  }

  public double getPrezzo() {
    return prezzo;
  }

  @Override
  public String toString() {
    return nome + " - ‚Ç¨" + prezzo;
  }
}`}
                  </pre>

                  {/* Main con Stream */}
                  <p className="mt-4">
                    <strong>
                      üöÄ Punto di partenza ‚Äì <code>main()</code> con Stream
                    </strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`public class Catalogo {
  public static void main(String[] args) {
    List<Prodotto> prodotti = List.of(
      new Prodotto("Penna", 2.5),
      new Prodotto("Notebook", 25.0),
      new Prodotto("Zaino", 45.0),
      new Prodotto("Matita", 1.0),
      new Prodotto("Mouse", 19.9)
    );

    prodotti.stream()
      .filter(p -> p.getPrezzo() > 20)
      .sorted(Comparator.comparingDouble(Prodotto::getPrezzo))
      .forEach(System.out::println);
  }
}`}
                  </pre>

                  {/* Output */}
                  <p className="mt-4">
                    <strong>üì§ Output atteso</strong>
                  </p>
                  <pre
                    className="bg-black text-success p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem", fontStyle: "italic" }}
                  >
                    {String.raw`Notebook - ‚Ç¨25.0
Zaino - ‚Ç¨45.0`}
                  </pre>

                  {/* Conclusione */}
                  <p className="mt-4">
                    <strong>üìå Cosa hai usato</strong>
                    <br />‚úÖ <code>Stream</code> per elaborare la lista
                    <br />‚úÖ <code>filter()</code> per selezionare i prodotti
                    <br />‚úÖ <code>sorted()</code> per ordinarli
                    <br />‚úÖ <code>forEach()</code> per stamparli
                    <br />‚úÖ <code>Comparator</code> con{" "}
                    <code>method reference</code>
                    <br />‚úÖ <code>toString()</code> per output leggibile
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üíº Stream avanzati</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üå™Ô∏è Java ‚Äì Stream Avanzati
                  </Card.Title>

                  <p className="mt-3">
                    Gli <strong>Stream</strong> in Java permettono di elaborare
                    collezioni in modo funzionale e fluido. Le operazioni
                    avanzate come <code>mapToDouble</code>, <code>flatMap</code>
                    , <code>peek</code> e <code>distinct</code>
                    offrono grande potenza per analisi, trasformazioni e
                    ottimizzazioni.
                  </p>

                  <p className="mt-4">
                    <strong>üìê mapToDouble</strong> ‚Äì Trasforma in uno stream di
                    double
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`List<String> prezzi = List.of("10.5", "20.0", "7.25");
double somma = prezzi.stream()
  .mapToDouble(Double::parseDouble)
  .sum();
System.out.println("Totale: " + somma); // Totale: 37.75`}
                  </div>

                  <p className="mt-4">
                    <strong>üß© flatMap</strong> ‚Äì Appiattisce stream di stream
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`List<List<String>> gruppi = List.of(
  List.of("A", "B"),
  List.of("C", "D")
);
gruppi.stream()
  .flatMap(List::stream)
  .forEach(System.out::println); // A B C D`}
                  </div>

                  <p className="mt-4">
                    <strong>üîç distinct</strong> ‚Äì Rimuove duplicati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`List<String> nomi = List.of("Luna", "Sole", "Luna", "Stella");
nomi.stream()
  .distinct()
  .forEach(System.out::println); // Luna Sole Stella`}
                  </div>

                  <p className="mt-4">
                    <strong>üïµÔ∏è peek</strong> ‚Äì Debug intermedio
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`List<Integer> numeri = List.of(1, 2, 3);
numeri.stream()
  .peek(n -> System.out.println("Prima: " + n))
  .map(n -> n * 2)
  .peek(n -> System.out.println("Dopo: " + n))
  .forEach(n -> {});`}
                  </div>

                  <p className="mt-4">
                    <strong>üìä summaryStatistics</strong> ‚Äì Statistiche
                    aggregate
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`IntSummaryStatistics stats = IntStream.of(5, 10, 15)
  .summaryStatistics();
System.out.println("Media: " + stats.getAverage()); // Media: 10.0`}
                  </div>

                  <p className="mt-4">
                    <strong>üß† filter + collect</strong> ‚Äì Raccolta condizionata
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`List<String> parole = List.of("sole", "luna", "stella");
List<String> filtrate = parole.stream()
  .filter(p -> p.length() > 4)
  .collect(Collectors.toList());
System.out.println(filtrate); // [luna, stella]`}
                  </div>

                  <p className="mt-4">
                    Gli Stream avanzati ti permettono di scrivere codice potente
                    e pulito. Usali per trasformare, analizzare e ottimizzare i
                    tuoi dati come un vero Jedi del Java ‚öîÔ∏è‚òï
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üß± Java ‚Äì Maven</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß± Java ‚Äì Maven Essentials
                  </Card.Title>

                  <p className="mt-3">
                    <strong>Maven</strong> √® uno strumento di build e gestione
                    dei progetti Java. Automatizza il download delle librerie,
                    la compilazione, i test e la creazione dei pacchetti. Tutto
                    √® configurato tramite un file chiamato <code>pom.xml</code>.
                  </p>

                  <p className="mt-4">
                    <strong>
                      üì¶ Cos'√® il <code>pom.xml</code>
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.stella</groupId>
  <artifactId>mia-app</artifactId>
  <version>1.0.0</version>
</project>`}
                  </div>
                  <p className="mt-2">
                    Questo file descrive il progetto, le dipendenze e le
                    configurazioni. √à il cuore di Maven üíì
                  </p>

                  <p className="mt-4">
                    <strong>üìö Aggiungere una dipendenza</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <version>3.1.0</version>
  </dependency>
</dependencies>`}
                  </div>
                  <p className="mt-2">
                    Maven scarica automaticamente la libreria da internet e la
                    include nel progetto. Addio copia-incolla manuale! üöÄ
                  </p>

                  <p className="mt-4">
                    <strong>‚öôÔ∏è Comandi base</strong>
                  </p>
                  <ul>
                    <li>
                      <code>mvn compile</code> ‚Üí Compila il codice
                    </li>
                    <li>
                      <code>mvn test</code> ‚Üí Esegue i test
                    </li>
                    <li>
                      <code>mvn package</code> ‚Üí Crea il file <code>.jar</code>{" "}
                      o <code>.war</code>
                    </li>
                    <li>
                      <code>mvn clean</code> ‚Üí Pulisce i file generati
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üß™ Esempio: struttura progetto Maven</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`mia-app/
‚îú‚îÄ‚îÄ pom.xml
‚îî‚îÄ‚îÄ src/
    ‚îú‚îÄ‚îÄ main/
    ‚îÇ   ‚îî‚îÄ‚îÄ java/
    ‚îÇ       ‚îî‚îÄ‚îÄ com/stella/App.java
    ‚îî‚îÄ‚îÄ test/
        ‚îî‚îÄ‚îÄ java/
            ‚îî‚îÄ‚îÄ com/stella/AppTest.java`}
                  </div>

                  <p className="mt-4">
                    Maven ti aiuta a concentrarti sul codice, lasciando a lui la
                    gestione delle dipendenze e dei build. √à come avere un
                    assistente personale per il tuo progetto Java üõ†Ô∏è‚ú®
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üìöI Database Relazionali</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üóÑÔ∏è Introduzione ai Database Relazionali
                  </Card.Title>

                  <p className="mt-3">
                    I <strong>Database Relazionali</strong> (RDBMS) sono sistemi
                    che memorizzano i dati in tabelle collegate tra loro tramite
                    relazioni. Ogni tabella √® composta da righe (<em>record</em>
                    ) e colonne (<em>campi</em>).
                  </p>

                  <p className="mt-4">
                    <strong>
                      üìä Esempio di tabella: <code>Clienti</code>
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`+----+----------+-------------------+
| ID | Nome     | Email             |
+----+----------+-------------------+
| 1  | Stella   | stella@email.com  |
| 2  | Marco    | marco@email.com   |
+----+----------+-------------------+`}
                  </div>

                  <p className="mt-4">
                    <strong>üîó Relazioni tra tabelle</strong>
                    Le tabelle possono essere collegate tramite chiavi:
                  </p>
                  <ul>
                    <li>
                      <strong>Chiave primaria</strong> ‚Üí identifica univocamente
                      ogni riga
                    </li>
                    <li>
                      <strong>Chiave esterna</strong> ‚Üí collega una tabella a
                      un'altra
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>
                      üß† Esempio: tabella <code>Ordini</code> collegata a{" "}
                      <code>Clienti</code>
                    </strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`+----+ ID_Cliente | Prodotto     |
| 1  | 1          | Laptop       |
| 2  | 2          | Smartphone   |`}
                  </div>
                  <p className="mt-2">
                    Qui <code>ID_Cliente</code> √® una chiave esterna che si
                    riferisce alla tabella <code>Clienti</code>.
                  </p>

                  <p className="mt-4">
                    <strong>üß™ SQL ‚Äì Linguaggio per interrogare i dati</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT Nome, Prodotto
FROM Clienti
JOIN Ordini ON Clienti.ID = Ordini.ID_Cliente;`}
                  </div>
                  <p className="mt-2">
                    Questo comando mostra quali clienti hanno ordinato quali
                    prodotti. Il <code>JOIN</code> unisce le tabelle in base
                    alla relazione.
                  </p>

                  <p className="mt-4">
                    <strong>üõ†Ô∏è I database relazionali pi√π usati</strong>
                  </p>
                  <ul>
                    <li>üîπ MySQL</li>
                    <li>üîπ PostgreSQL</li>
                    <li>üîπ Oracle</li>
                    <li>üîπ Microsoft SQL Server</li>
                  </ul>

                  <p className="mt-4">
                    I database relazionali sono fondamentali per gestire dati
                    strutturati in modo sicuro, coerente e scalabile. Se stai
                    creando un'app, √® probabile che ci sia un RDBMS dietro le
                    quinte üíæ‚ú®
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">propriet√† fondamentali delle colonne</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß© SQL ‚Äì Propriet√† delle Tabelle
                  </Card.Title>

                  <p className="mt-3">
                    Quando crei una tabella in un database relazionale, puoi
                    definire regole che garantiscono la qualit√† e la coerenza
                    dei dati. Ecco le pi√π importanti:
                  </p>

                  <p className="mt-4">
                    <strong>üìå NOT NULL</strong> ‚Äì Il campo non pu√≤ essere vuoto
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Utenti (
  ID INT,
  Nome VARCHAR(50) NOT NULL
);`}
                  </div>
                  <p className="mt-2">
                    Se provi a inserire un utente senza <code>Nome</code>, il
                    database dar√† errore. Utile per campi obbligatori come
                    email, password, ecc.
                  </p>

                  <p className="mt-4">
                    <strong>üîê UNIQUE</strong> ‚Äì Valori non ripetibili
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Utenti (
  Email VARCHAR(100) UNIQUE
);`}
                  </div>
                  <p className="mt-2">
                    Nessun utente pu√≤ avere la stessa email di un altro.
                    Perfetto per identificatori come username o codice fiscale.
                  </p>

                  <p className="mt-4">
                    <strong>üÜî PRIMARY KEY</strong> ‚Äì Identificatore univoco
                    della riga
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Utenti (
  ID INT PRIMARY KEY,
  Nome VARCHAR(50)
);`}
                  </div>
                  <p className="mt-2">
                    Ogni riga deve avere un <code>ID</code> unico e non nullo. √à
                    la colonna che distingue ogni record.
                  </p>

                  <p className="mt-4">
                    <strong>üîó FOREIGN KEY</strong> ‚Äì Collega due tabelle
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Ordini (
  ID INT PRIMARY KEY,
  ID_Utente INT,
  FOREIGN KEY (ID_Utente) REFERENCES Utenti(ID)
);`}
                  </div>
                  <p className="mt-2">
                    <code>ID_Utente</code> deve corrispondere a un{" "}
                    <code>ID</code> esistente nella tabella <code>Utenti</code>.
                    Questo crea una relazione tra le tabelle.
                  </p>

                  <p className="mt-4">
                    <strong>üß± Altre propriet√† utili</strong>
                  </p>
                  <ul>
                    <li>
                      <code>AUTO_INCREMENT</code> ‚Üí genera ID automatici
                    </li>
                    <li>
                      <code>DEFAULT</code> ‚Üí assegna un valore predefinito
                    </li>
                    <li>
                      <code>CHECK</code> ‚Üí impone una condizione (es. et√† &gt;
                      18)
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üìê Esempio completo</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Utenti (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  Nome VARCHAR(50) NOT NULL,
  Email VARCHAR(100) UNIQUE,
  Et√† INT CHECK (Et√† >= 18),
  Iscrizione DATE DEFAULT CURRENT_DATE
);`}
                  </div>

                  <p className="mt-4">
                    Queste regole rendono il tuo database pi√π sicuro, coerente e
                    facile da interrogare. √à come dare una struttura solida ai
                    tuoi dati üèóÔ∏èüìä
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üêòPostgreSQL - pgAdmin</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üêò PostgreSQL + pgAdmin ‚Äì Guida Rapida
                  </Card.Title>

                  <p className="mt-3">
                    <strong>PostgreSQL</strong> √® un potente database
                    relazionale open-source.
                    <strong>pgAdmin</strong> √® l‚Äôinterfaccia grafica ufficiale
                    per gestirlo facilmente. Insieme sono perfetti per
                    sviluppatori, analisti e app Java/Spring.
                  </p>

                  <p className="mt-4">
                    <strong>‚¨áÔ∏è Installazione</strong>
                  </p>
                  <ul>
                    <li>
                      Vai su <code>https://www.postgresql.org/download/</code>
                    </li>
                    <li>
                      Scarica il pacchetto per il tuo sistema operativo
                      (Windows, macOS, Linux)
                    </li>
                    <li>
                      Durante l‚Äôinstallazione, seleziona anche{" "}
                      <strong>pgAdmin</strong>
                    </li>
                    <li>
                      Imposta una password per l‚Äôutente <code>postgres</code>{" "}
                      (superuser)
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üöÄ Avvio di pgAdmin</strong>
                  </p>
                  <ul>
                    <li>Apri pgAdmin dal menu Start o dal launcher</li>
                    <li>
                      Inserisci la password impostata per <code>postgres</code>
                    </li>
                    <li>
                      Connettiti al server locale ‚Üí <code>localhost:5432</code>
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üìÅ Creare un database</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`1. Clic destro su "Databases" ‚Üí Create ‚Üí Database  
2. Dai un nome (es. "stella_db")  
3. Salva ‚Üí Il database √® pronto!`}
                  </div>

                  <p className="mt-4">
                    <strong>üß± Creare una tabella</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Clienti (
  ID SERIAL PRIMARY KEY,
  Nome VARCHAR(50) NOT NULL,
  Email VARCHAR(100) UNIQUE
);`}
                  </div>
                  <p className="mt-2">
                    Puoi eseguire questo script nella sezione{" "}
                    <strong>Query Tool</strong> di pgAdmin.
                  </p>

                  <p className="mt-4">
                    <strong>üîç Visualizzare i dati</strong>
                  </p>
                  <ul>
                    <li>Espandi il database ‚Üí Schemas ‚Üí Tables ‚Üí Clienti</li>
                    <li>Clic destro ‚Üí View/Edit Data ‚Üí All Rows</li>
                    <li>Puoi modificare i dati direttamente da l√¨!</li>
                  </ul>

                  <p className="mt-4">
                    <strong>üì§ Esportare e importare</strong>
                  </p>
                  <ul>
                    <li>
                      <strong>Backup</strong>: clic destro sul database ‚Üí Backup
                      ‚Üí formato <code>.sql</code>
                    </li>
                    <li>
                      <strong>Restore</strong>: clic destro ‚Üí Restore ‚Üí
                      seleziona file
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üß† Comandi utili in SQL</strong>
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT * FROM Clienti;
INSERT INTO Clienti (Nome, Email) VALUES ('Stella', 'stella@email.com');
UPDATE Clienti SET Nome = 'Stellina' WHERE ID = 1;
DELETE FROM Clienti WHERE ID = 2;`}
                  </div>

                  <p className="mt-4">
                    PostgreSQL + pgAdmin ti danno il pieno controllo sui tuoi
                    dati. √à come avere un laboratorio dati personale, elegante e
                    potente üíæüß™
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üß†istruzioni SQL pi√π usate e utili</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß† SQL ‚Äì Comandi Fondamentali
                  </Card.Title>

                  <p className="mt-3">
                    Il linguaggio <strong>SQL</strong> (Structured Query
                    Language) √® usato per gestire e interrogare database
                    relazionali. Ecco i comandi pi√π utili e frequenti, con
                    esempi chiari.
                  </p>

                  <p className="mt-4">
                    <strong>üìÅ CREATE TABLE</strong> ‚Äì Crea una nuova tabella
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`CREATE TABLE Clienti (
  ID SERIAL PRIMARY KEY,
  Nome VARCHAR(50) NOT NULL,
  Email VARCHAR(100) UNIQUE
);`}
                  </div>

                  <p className="mt-4">
                    <strong>üì• INSERT INTO</strong> ‚Äì Inserisce dati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`INSERT INTO Clienti (Nome, Email)
VALUES ('Stella', 'stella@email.com');`}
                  </div>

                  <p className="mt-4">
                    <strong>üîç SELECT</strong> ‚Äì Interroga i dati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT * FROM Clienti;
SELECT Nome FROM Clienti WHERE ID = 1;`}
                  </div>

                  <p className="mt-4">
                    <strong>‚úèÔ∏è UPDATE</strong> ‚Äì Modifica i dati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`UPDATE Clienti
SET Nome = 'Stellina'
WHERE ID = 1;`}
                  </div>

                  <p className="mt-4">
                    <strong>üóëÔ∏è DELETE</strong> ‚Äì Elimina dati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`DELETE FROM Clienti WHERE ID = 2;`}
                  </div>

                  <p className="mt-4">
                    <strong>üîó JOIN</strong> ‚Äì Unisce tabelle correlate
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT Clienti.Nome, Ordini.Prodotto
FROM Clienti
JOIN Ordini ON Clienti.ID = Ordini.ID_Cliente;`}
                  </div>

                  <p className="mt-4">
                    <strong>üìä COUNT, AVG, MAX, MIN</strong> ‚Äì Funzioni
                    aggregate
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT COUNT(*) FROM Clienti;
SELECT AVG(Prezzo) FROM Ordini;`}
                  </div>

                  <p className="mt-4">
                    <strong>üì¶ ORDER BY & LIMIT</strong> ‚Äì Ordinamento e limiti
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT * FROM Ordini
ORDER BY Prezzo DESC
LIMIT 5;`}
                  </div>

                  <p className="mt-4">
                    <strong>üßπ DROP & TRUNCATE</strong> ‚Äì Rimozione strutture
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`DROP TABLE Clienti;
TRUNCATE TABLE Ordini;`}
                  </div>

                  <p className="mt-4">
                    Con questi comandi hai il controllo completo sul tuo
                    database. SQL √® come una bacchetta magica per i dati:
                    preciso, potente e universale ‚ú®üìä
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üßÉoperazioni CRUD</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üîÑ CRUD ‚Äì Le 4 Operazioni Fondamentali
                  </Card.Title>

                  <p className="mt-3">
                    <strong>CRUD</strong> √® l'acronimo di{" "}
                    <em>Create, Read, Update, Delete</em>. Sono le 4 operazioni
                    fondamentali per gestire i dati in un database o tramite API
                    REST. Ogni applicazione che lavora con dati usa CRUD ogni
                    giorno!
                  </p>

                  <p className="mt-4">
                    <strong>üÜï C ‚Äì CREATE</strong> ‚Üí Inserisce nuovi dati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`INSERT INTO Clienti (Nome, Email)
VALUES ('Stella', 'stella@email.com');`}
                  </div>
                  <p className="mt-2">
                    In SQL si usa <code>INSERT</code>. In REST si usa{" "}
                    <strong>POST</strong> ‚Üí <code>POST /clienti</code>
                  </p>

                  <p className="mt-4">
                    <strong>üìñ R ‚Äì READ</strong> ‚Üí Legge i dati esistenti
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`SELECT * FROM Clienti;
SELECT Nome FROM Clienti WHERE ID = 1;`}
                  </div>
                  <p className="mt-2">
                    In SQL si usa <code>SELECT</code>. In REST si usa{" "}
                    <strong>GET</strong> ‚Üí <code>GET /clienti</code>
                  </p>

                  <p className="mt-4">
                    <strong>‚úèÔ∏è U ‚Äì UPDATE</strong> ‚Üí Modifica dati esistenti
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`UPDATE Clienti
SET Nome = 'Stellina'
WHERE ID = 1;`}
                  </div>
                  <p className="mt-2">
                    In SQL si usa <code>UPDATE</code>. In REST si usa{" "}
                    <strong>PUT</strong> o <strong>PATCH</strong> ‚Üí{" "}
                    <code>PUT /clienti/1</code>
                  </p>

                  <p className="mt-4">
                    <strong>üóëÔ∏è D ‚Äì DELETE</strong> ‚Üí Elimina dati
                  </p>
                  <div
                    style={{
                      background: "#111",
                      padding: "1rem",
                      borderRadius: "8px",
                      fontSize: "0.85rem",
                      whiteSpace: "pre-wrap",
                    }}
                  >
                    {String.raw`DELETE FROM Clienti WHERE ID = 1;`}
                  </div>
                  <p className="mt-2">
                    In SQL si usa <code>DELETE</code>. In REST si usa{" "}
                    <strong>DELETE</strong> ‚Üí <code>DELETE /clienti/1</code>
                  </p>

                  <p className="mt-4">
                    <strong>üì¶ CRUD + Interfacce</strong>
                  </p>
                  <ul>
                    <li>üóÇÔ∏è Database ‚Üí SQL (PostgreSQL, MySQL, ecc.)</li>
                    <li>üåê API ‚Üí REST (Spring Boot, Express, ecc.)</li>
                    <li>üñ•Ô∏è Frontend ‚Üí Form, bottoni, dashboard</li>
                  </ul>

                  <p className="mt-4">
                    Le operazioni CRUD sono il cuore di ogni sistema che
                    gestisce dati. Se sai fare CRUD, sai costruire il motore di
                    qualsiasi app üí™üß†
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">
                ‚òïJPA (Java Persistence API) e Hibernate.{" "}
              </h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üß¨ Java ‚Äì Entit√† JPA con Annotazioni
                  </Card.Title>

                  <p className="mt-3">
                    In Java, puoi creare una tabella direttamente nel codice
                    usando le annotazioni di <strong>JPA</strong>. Le classi
                    annotate come <code>@Entity</code> rappresentano le tabelle
                    del database. Hibernate (o un altro ORM) si occupa di
                    tradurre tutto in SQL!
                  </p>

                  <p className="mt-4">
                    <strong>
                      üì¶ Esempio: classe <code>Cliente</code>
                    </strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.85rem" }}
                  >
                    {String.raw`@Entity
@Table(name = "clienti")
public class Cliente {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(nullable = false)
  private String nome;

  @Column(unique = true)
  private String email;

  @Column(name = "data_iscrizione")
  private LocalDate iscrizione;

  // Getters e Setters
}`}
                  </pre>

                  <p className="mt-2">
                    Questa classe crea una tabella <code>clienti</code> con
                    colonne <code>id</code>, <code>nome</code>,{" "}
                    <code>email</code> e <code>data_iscrizione</code>.
                  </p>

                  <p className="mt-4">
                    <strong>üîë Annotazioni principali</strong>
                  </p>
                  <ul>
                    <li>
                      <code>@Entity</code> ‚Üí indica che la classe √® una tabella
                    </li>
                    <li>
                      <code>@Table</code> ‚Üí specifica il nome della tabella
                    </li>
                    <li>
                      <code>@Id</code> ‚Üí chiave primaria
                    </li>
                    <li>
                      <code>@GeneratedValue</code> ‚Üí genera ID automatici
                    </li>
                    <li>
                      <code>@Column</code> ‚Üí personalizza la colonna (nome,
                      vincoli, ecc.)
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üß† Altre annotazioni utili</strong>
                  </p>
                  <ul>
                    <li>
                      <code>@ManyToOne</code>, <code>@OneToMany</code> ‚Üí
                      relazioni tra entit√†
                    </li>
                    <li>
                      <code>@JoinColumn</code> ‚Üí definisce la chiave esterna
                    </li>
                    <li>
                      <code>@Enumerated</code> ‚Üí per tipi enum
                    </li>
                    <li>
                      <code>@Transient</code> ‚Üí campo ignorato dal database
                    </li>
                  </ul>

                  <p className="mt-4">
                    <strong>üöÄ Repository + Spring Data</strong>
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.85rem" }}
                  >
                    {String.raw`public interface ClienteRepository extends JpaRepository<Cliente, Long> {
  List<Cliente> findByNome(String nome);
}`}
                  </pre>

                  <p className="mt-2">
                    Con <code>JpaRepository</code> hai gi√† tutti i metodi CRUD
                    pronti: <code>save</code>, <code>findAll</code>,{" "}
                    <code>deleteById</code>, ecc.
                  </p>

                  <p className="mt-4">
                    Con JPA puoi modellare il tuo database direttamente in Java,
                    mantenendo il codice pulito, tipizzato e facile da
                    mantenere. √à come dare vita alle tabelle con oggetti
                    intelligenti üß†üìä
                  </p>
                </Card.Body>
              </Card>

              <h2 className="mt-5">üß†relazioni tra entit√† in Java</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üîó Relazioni tra Entit√† in JPA
                  </Card.Title>

                  <p className="mt-3">
                    Le relazioni in JPA collegano le entit√† Java come fossero
                    tabelle in un database relazionale. Servono per modellare il
                    mondo reale: utenti con profili, ordini con prodotti,
                    studenti con corsi.
                  </p>

                  {/* OneToOne */}
                  <p className="mt-4">
                    <strong>üë§ @OneToOne</strong> ‚Äì Uno a uno
                  </p>
                  <p>
                    Una entit√† √® collegata a una sola altra entit√†. Esempio:
                    ogni <code>Utente</code> ha un solo <code>Profilo</code>.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`@Entity
public class Profilo {
  @Id
  private Long id;

  @OneToOne
  @JoinColumn(name = "utente_id")
  private Utente utente;
}`}
                  </pre>

                  {/* OneToMany */}
                  <p className="mt-4">
                    <strong>üì¶ @OneToMany</strong> ‚Äì Uno a molti
                  </p>
                  <p>
                    Una entit√† √® collegata a molte altre. Esempio: un{" "}
                    <code>Utente</code> ha molti <code>Ordini</code>.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`@Entity
public class Utente {
  @Id
  private Long id;

  @OneToMany(mappedBy = "utente")
  private List<Ordine> ordini;
}`}
                  </pre>

                  {/* ManyToOne */}
                  <p className="mt-4">
                    <strong>üì• @ManyToOne</strong> ‚Äì Molti a uno
                  </p>
                  <p>
                    Molte entit√† sono collegate a una sola. Esempio: molti{" "}
                    <code>Ordini</code> appartengono allo stesso{" "}
                    <code>Utente</code>.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`@Entity
public class Ordine {
  @Id
  private Long id;

  @ManyToOne
  @JoinColumn(name = "utente_id")
  private Utente utente;
}`}
                  </pre>

                  {/* ManyToMany */}
                  <p className="mt-4">
                    <strong>üîÑ @ManyToMany</strong> ‚Äì Molti a molti
                  </p>
                  <p>
                    Molte entit√† sono collegate a molte altre. Esempio: uno{" "}
                    <code>Studente</code> pu√≤ seguire pi√π <code>Corsi</code>, e
                    ogni <code>Corso</code> pu√≤ avere pi√π studenti.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.8rem" }}
                  >
                    {String.raw`@Entity
public class Studente {
  @Id
  private Long id;

  @ManyToMany
  @JoinTable(
    name = "studente_corso",
    joinColumns = @JoinColumn(name = "studente_id"),
    inverseJoinColumns = @JoinColumn(name = "corso_id")
  )
  private List<Corso> corsi;
}`}
                  </pre>

                  {/* Note */}
                  <p className="mt-4">
                    <strong>üìå Note utili</strong>
                  </p>
                  <ul>
                    <li>
                      <code>mappedBy</code> indica il lato passivo della
                      relazione
                    </li>
                    <li>
                      <code>cascade</code> gestisce operazioni propagate (es.{" "}
                      <code>CascadeType.ALL</code>)
                    </li>
                    <li>
                      <code>fetch</code> controlla il caricamento (es.{" "}
                      <code>FetchType.LAZY</code>)
                    </li>
                  </ul>

                  {/* Conclusione */}
                  <p className="mt-4">
                    Le relazioni ti permettono di navigare tra oggetti come
                    fossero connessi nel mondo reale. Una volta capite,
                    diventano intuitive e potenti ‚ú®
                  </p>
                </Card.Body>
              </Card>
              <h2 className="mt-5">üí´ query in JPA</h2>
              <Card bg="dark" text="light" className="mt-4 shadow">
                <Card.Body>
                  <Card.Title className="text-center">
                    üîç JPA ‚Äì Query e Ricerca Dati
                  </Card.Title>

                  <p className="mt-3">
                    In JPA puoi eseguire query per cercare, filtrare o ordinare
                    i dati nel database. Puoi usare <strong>JPQL</strong> (Java
                    Persistence Query Language), <strong>native query</strong>{" "}
                    SQL, oppure i metodi automatici di <code>Spring Data</code>.
                  </p>

                  {/* Query con JPQL */}
                  <p className="mt-4">
                    <strong>üß† JPQL ‚Äì Query orientate agli oggetti</strong>
                  </p>
                  <p>
                    JPQL usa i nomi delle classi e dei campi Java, non quelli
                    delle tabelle SQL. Esempio: cerca tutti i clienti con nome
                    "Marco".
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.85rem" }}
                  >
                    {String.raw`@Query("SELECT c FROM Cliente c WHERE c.nome = :nome")
List<Cliente> trovaPerNome(@Param("nome") String nome);`}
                  </pre>

                  {/* Native Query */}
                  <p className="mt-4">
                    <strong>üß¨ Native Query ‚Äì SQL puro</strong>
                  </p>
                  <p>
                    Se vuoi usare direttamente SQL, puoi farlo con{" "}
                    <code>@Query</code> e <code>nativeQuery = true</code>.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.85rem" }}
                  >
                    {String.raw`@Query(value = "SELECT * FROM clienti WHERE email LIKE %:email%", nativeQuery = true)
List<Cliente> cercaPerEmail(@Param("email") String email);`}
                  </pre>

                  {/* Query derivata da nome metodo */}
                  <p className="mt-4">
                    <strong>‚ö° Query automatica ‚Äì Spring Data</strong>
                  </p>
                  <p>
                    Spring Data genera query automaticamente in base al nome del
                    metodo. Esempio: trova tutti i clienti iscritti dopo una
                    certa data.
                  </p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.85rem" }}
                  >
                    {String.raw`List<Cliente> findByIscrizioneAfter(LocalDate data);`}
                  </pre>

                  {/* Ordinamento e combinazioni */}
                  <p className="mt-4">
                    <strong>üìä Ordinamento e combinazioni</strong>
                  </p>
                  <p>Puoi combinare pi√π condizioni e ordinare i risultati.</p>
                  <pre
                    className="bg-black text-light p-2 rounded text-start overflow-auto"
                    style={{ fontSize: "0.85rem" }}
                  >
                    {String.raw`List<Cliente> findByNomeAndEmailOrderByIscrizioneDesc(String nome, String email);`}
                  </pre>

                  {/* Note */}
                  <p className="mt-4">
                    <strong>üìå Note utili</strong>
                  </p>
                  <ul>
                    <li>
                      <code>@Query</code> ti permette di scrivere JPQL o SQL
                    </li>
                    <li>
                      <code>@Param</code> collega i parametri della query
                    </li>
                    <li>
                      I metodi <code>findBy</code>, <code>countBy</code>,{" "}
                      <code>deleteBy</code> sono generati automaticamente
                    </li>
                    <li>
                      Puoi usare <code>Pageable</code> per la paginazione
                    </li>
                  </ul>

                  {/* Conclusione */}
                  <p className="mt-4">
                    Le query in JPA ti permettono di interrogare il database in
                    modo elegante e tipizzato. Che tu scriva JPQL, SQL o usi i
                    metodi automatici, hai sempre il pieno controllo sui dati
                    üîçüì¶
                  </p>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Container>
      </div>
    </>
  )
}
export default Java
